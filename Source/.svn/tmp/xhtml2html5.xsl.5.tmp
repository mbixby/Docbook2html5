<?xml version="1.0" encoding="UTF-8"?><xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"                 xmlns:html="http://www.w3.org/1999/xhtml"                 version="1.0"                xmlns="http://www.w3.org/1999/xhtml"                exclude-result-prefixes="html">    <xsl:output method="xml"				encoding="utf-8" 				omit-xml-declaration="yes" 				indent="yes"/>	<!-- NOTES:	Please use 4 spaces for tabs, comment new templates and keep the style		overally nice and clean.	Use Skype or Google Code To-do to keep everybody on track with what you're		working on	-->	<!-- Add correct doctype -->    <xsl:variable name="doctype">        <xsl:text>&lt;!DOCTYPE html&gt;</xsl:text>    </xsl:variable>    <xsl:template match="/">        <xsl:value-of select="$doctype" disable-output-escaping="yes"/>        <xsl:apply-templates select="node()"/>    </xsl:template>	<!-- Copy all nodes recursively and apply templates -->    <xsl:template match="@*|node()">        <xsl:copy>            <xsl:apply-templates select="@*|node()"/>        </xsl:copy>    </xsl:template>	<!-- Adds base.css style  -->    <xsl:template match="html:head">        <xsl:copy>            <xsl:if test="count(meta[@http-equiv='Content-Type']) &lt; 1">                <xsl:element name="meta">                    <xsl:attribute name="http-equiv"><xsl:text>Content-Type</xsl:text></xsl:attribute>                    <xsl:attribute name="content"><xsl:text>text/html; charset=UTF-8</xsl:text></xsl:attribute>                </xsl:element>            </xsl:if>            <xsl:apply-templates/>            <xsl:element name="link">                <xsl:attribute name="rel">                    <xsl:value-of select="'stylesheet'"/>                </xsl:attribute>                <xsl:attribute name="href">                    <xsl:value-of select="'css/base.css'"/>                </xsl:attribute>                <xsl:attribute name="type">                    <xsl:value-of select="'text/css'"/>                </xsl:attribute>            </xsl:element>        </xsl:copy>    </xsl:template>    <!-- Replace or remove attributes from the xml namespace -->    <xsl:template match="html:div[@xml:lang]/@xml:lang">        <xsl:attribute name="lang"><xsl:value-of select="." /></xsl:attribute>    </xsl:template>    <xsl:template match="@xml:space">    </xsl:template>    <!-- Remove redundant span attributes from colgroup and col -->    <xsl:template match="html:colgroup[@span]/@span">    </xsl:template>    <xsl:template match="html:col[@span]/@span">    </xsl:template>   <!-- Changing div class='header' to <header> -->    <xsl:template match="html:div[@class='header']" priority="1">        <xsl:element name="header">            <xsl:apply-templates select="@*|node()"/>        </xsl:element>    </xsl:template>   <!-- Changing div class='nav' to <nav> -->    <xsl:template match="html:div[@class='nav']" priority="1">        <xsl:element name="nav">            <xsl:apply-templates select="* | text()"/>        </xsl:element>    </xsl:template>   <!-- Changing div class='article' to <article> -->    <xsl:template match="html:div[@class='article']" priority="1">        <xsl:element name="article">            <xsl:apply-templates select="* | text()"/>        </xsl:element>    </xsl:template>   <!-- Changing div class='section' to <section> -->    <xsl:template match="html:div[@class='section']" priority="1">        <xsl:element name="section">            <xsl:apply-templates select="* | text()"/>        </xsl:element>    </xsl:template>   <!-- Changing div class='aside' to <aside> -->    <xsl:template match="html:div[@class='aside']" priority="1">        <xsl:element name="aside">            <xsl:apply-templates select="* | text()"/>        </xsl:element>    </xsl:template>   <!-- Changing div class='footer' to <footer> -->    <xsl:template match="html:div[@class='footer']" priority="1">        <xsl:element name="footer">            <xsl:apply-templates select="* | text()"/>        </xsl:element>    </xsl:template>	<!-- DL/DT/DD fixes -->    <xsl:template match="html:dl">        <xsl:element name="ul">            <xsl:apply-templates select="* | text()"/>        </xsl:element>    </xsl:template>      <xsl:template match="html:dt | html:dd">        <xsl:element name="li">            <xsl:apply-templates select="* | text()"/>        </xsl:element>    </xsl:template>    <!-- Replace obsolete <acronym> with <abbr> -->    <xsl:template match="html:acronym">        <xsl:element name="abbr">            <xsl:apply-templates select="* | text()"/>        </xsl:element>    </xsl:template>	<!-- Replace obsolete align/valign attribute with class="align" -->    <xsl:template match="@align[contains(.,'left')]">        <xsl:attribute name="class">            <xsl:value-of select="'align_left'"/>        </xsl:attribute>    </xsl:template>    <xsl:template match="@align[contains(.,'center')] | @align[contains(.,'middle')]">        <xsl:attribute name="class">            <xsl:value-of select="'align_center'"/>        </xsl:attribute>    </xsl:template>    <xsl:template match="@align[contains(.,'right')]">        <xsl:attribute name="class">            <xsl:value-of select="'align_right'"/>        </xsl:attribute>    </xsl:template>    <xsl:template match="@valign">        <xsl:attribute name="class">            <xsl:value-of select="'vertical_align'"/>        </xsl:attribute>    </xsl:template>	<!-- Removes empty <a> elements -->    <xsl:template match="html:a[. = ''] | html:p[. = ''] | html:div[. = '']">    </xsl:template>			  <!-- Removes deprecated attributes of attrs having anything to do		with styling. Removes summary attr on tables â€“ not neccessary 		as the docbook xslt adds the exact same summary text in <p> before the table -->	    <xsl:template match="@type | @shape | @clear | @width | @summary | @border">    </xsl:template>	<!-- Removes <p> inside <th>, leaves the text -->	<xsl:template match="html:th/html:p">		<xsl:copy-of select="text()" />	</xsl:template>						<xsl:template match="@xml:lang | @xml:space">	</xsl:template>		<xsl:template match="html:div[@class='variablelist'] | html:div[@class='itemizedlist'] | html:p/html:div">		<xsl:copy-of select="./*">			 <xsl:apply-templates select="* | text()"/>		</xsl:copy-of>	</xsl:template>		<xsl:template match="html:ul">	</xsl:template>		<xsl:template match="div[@class='sect1']">		<xsl:copy>			 <xsl:apply-templates select="* | text()"/>		</xsl:copy>		</div>	</xsl:template>  	</xsl:stylesheet>