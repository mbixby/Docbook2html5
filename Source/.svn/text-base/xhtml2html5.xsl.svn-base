<?xml version="1.0" encoding="UTF-8"?><xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"                 xmlns:html="http://www.w3.org/1999/xhtml"                 version="1.0"                xmlns="http://www.w3.org/1999/xhtml"                exclude-result-prefixes="html">    <xsl:output method="xml"				encoding="utf-8" 				omit-xml-declaration="yes" 				indent="yes"/>	<!-- NOTES:	Please use 4 spaces for tabs, comment new templates and keep the style		overally nice and clean.	Use Skype or Google Code To-do to keep everybody on track with what you're		working on	-->	<!-- Add correct doctype -->    <xsl:variable name="doctype">        <xsl:text>&lt;!DOCTYPE html&gt;</xsl:text>    </xsl:variable>    <xsl:template match="/">        <xsl:value-of select="$doctype" disable-output-escaping="yes"/>        <xsl:apply-templates select="node()"/>    </xsl:template>		<!-- Copy all nodes recursively and apply templates -->    <xsl:template match="@*|node()">        <xsl:copy>            <xsl:apply-templates select="@*|node()"/>        </xsl:copy>    </xsl:template>    <!-- Fixes the missing <a> inside <h2> -->    <xsl:template match="html:h2">        <xsl:element name="h2">            <xsl:if test="./html:a[@id]">                <xsl:element name="a">                                     <xsl:attribute name="id"><xsl:value-of select="html:a/@id" /></xsl:attribute>                <xsl:text> </xsl:text>                 </xsl:element>            </xsl:if>            <xsl:apply-templates select="* | text()"/>        </xsl:element>    </xsl:template>    <!-- Fixes the missing <a> inside <h3> -->    <xsl:template match="html:h3">        <xsl:element name="h3">            <xsl:if test="./html:a[@id]">                <xsl:element name="a">                                     <xsl:attribute name="id"><xsl:value-of select="html:a/@id" /></xsl:attribute>                <xsl:text> </xsl:text>                </xsl:element>            </xsl:if>            <xsl:apply-templates select="* | text()"/>        </xsl:element>    </xsl:template>	<!-- Adds base.css style  -->    <xsl:template match="html:head">        <xsl:copy>            <xsl:if test="count(meta[@http-equiv='Content-Type']) &lt; 1">                <xsl:element name="meta">                    <xsl:attribute name="http-equiv"><xsl:text>Content-Type</xsl:text></xsl:attribute>                    <xsl:attribute name="content"><xsl:text>text/html; charset=UTF-8</xsl:text></xsl:attribute>                </xsl:element>            </xsl:if>            <xsl:apply-templates/>			<xsl:element name="link">                <xsl:attribute name="rel">                    <xsl:value-of select="'stylesheet'"/>                </xsl:attribute>                <xsl:attribute name="href">                    <xsl:value-of select="'css/base.css'"/>                </xsl:attribute>                <xsl:attribute name="type">                    <xsl:value-of select="'text/css'"/>                </xsl:attribute>            </xsl:element>			<xsl:element name="script">                <xsl:attribute name="type">                    <xsl:value-of select="'text/javascript'"/>                </xsl:attribute>                <xsl:attribute name="src">                    <xsl:value-of select="'js/respond.min.js'"/>                </xsl:attribute>				<xsl:value-of select="' '"/>            </xsl:element>	        <xsl:element name="script">                <xsl:attribute name="type">                    <xsl:value-of select="'text/javascript'"/>                </xsl:attribute>                <xsl:attribute name="src">                    <xsl:value-of select="'js/mt-core.js'"/>                </xsl:attribute>				<xsl:value-of select="' '"/>            </xsl:element>			<xsl:element name="script">                <xsl:attribute name="type">                    <xsl:value-of select="'text/javascript'"/>                </xsl:attribute>                <xsl:attribute name="src">                    <xsl:value-of select="'js/mt-more.js'"/>                </xsl:attribute>				<xsl:value-of select="' '"/>            </xsl:element>			<xsl:element name="script">                <xsl:attribute name="type">                    <xsl:value-of select="'text/javascript'"/>                </xsl:attribute>                <xsl:attribute name="src">                    <xsl:value-of select="'js/main.js'"/>                </xsl:attribute>				<xsl:value-of select="' '"/>            </xsl:element>        </xsl:copy>    </xsl:template>	<!-- Inserts project logotypes (images) right before end of body. -->	<xsl:template match="html:body">		<xsl:copy>            <xsl:apply-templates select="@*|node()"/>			<xsl:element name="div">				<xsl:attribute name="class">		            <xsl:value-of select="'logotypes'"/>		        </xsl:attribute>				<xsl:element name="img">					<xsl:attribute name="src">			            <xsl:value-of select="'images/inovace-logo.png'"/>			        </xsl:attribute>					<xsl:attribute name="alt">			            <xsl:value-of select="'Tento projekt je spolufinancován Evropským sociálním fondem a státním rozpočtem ČR.'"/>			        </xsl:attribute>					<xsl:attribute name="width">			            <xsl:value-of select="'600'"/>			        </xsl:attribute>					<xsl:attribute name="height">			            <xsl:value-of select="'171'"/>			        </xsl:attribute>				</xsl:element>			</xsl:element>        </xsl:copy>	</xsl:template>			    <!-- Replaces/removes attributes from the xml namespace -->    <xsl:template match="html:div[@xml:lang]/@xml:lang">        <xsl:attribute name="lang">			<xsl:value-of select="." />		</xsl:attribute>    </xsl:template>    <xsl:template match="@xml:space">    </xsl:template>       <!-- Changing div class='header' to <header> -->    <xsl:template match="html:div[@class='header']" priority="1">        <xsl:element name="header">            <xsl:apply-templates select="@*|node()"/>        </xsl:element>    </xsl:template>   	<!-- Changing div class='nav' to <nav> -->    <xsl:template match="html:div[@class='nav']" priority="1">        <xsl:element name="nav">            <xsl:apply-templates select="* | text()"/>        </xsl:element>    </xsl:template>   <!-- Changing div class='article' to <article> -->    <xsl:template match="html:div[@class='article']" priority="1">        <xsl:element name="article">            <xsl:apply-templates select="* | text()"/>        </xsl:element>    </xsl:template>   <!-- Changing div class='section' to <section> -->    <xsl:template match="html:div[@class='section']" priority="1">        <xsl:element name="section">            <xsl:apply-templates select="* | text()"/>        </xsl:element>    </xsl:template>   <!-- Changing div class='aside' to <aside> -->    <xsl:template match="html:div[@class='aside']" priority="1">        <xsl:element name="aside">            <xsl:apply-templates select="* | text()"/>        </xsl:element>    </xsl:template>   <!-- Changing div class='footer' to <footer> -->    <xsl:template match="html:div[@class='footer']" priority="1">        <xsl:element name="footer">            <xsl:apply-templates select="* | text()"/>        </xsl:element>    </xsl:template>	<!-- DL/DT/DD fixes -->    <xsl:template match="html:dl">        <xsl:element name="ul">            <xsl:apply-templates select="* | text()"/>        </xsl:element>    </xsl:template>      <xsl:template match="html:dt | html:dd">        <xsl:element name="li">            <xsl:apply-templates select="* | text()"/>        </xsl:element>    </xsl:template>       <!-- Replace obsolete <acronym> with <abbr> -->    <xsl:template match="html:acronym">        <xsl:element name="abbr">            <xsl:apply-templates select="* | text()"/>        </xsl:element>    </xsl:template>	<!-- Replace obsolete align/valign attribute with class="align" -->    <xsl:template match="@align[contains(.,'left')]">        <xsl:attribute name="class">            <xsl:value-of select="'align_left'"/>        </xsl:attribute>    </xsl:template>    <xsl:template match="@align[contains(.,'center')] | @align[contains(.,'middle')]">        <xsl:attribute name="class">            <xsl:value-of select="'align_center'"/>        </xsl:attribute>    </xsl:template>    <xsl:template match="@align[contains(.,'right')]">        <xsl:attribute name="class">            <xsl:value-of select="'align_right'"/>        </xsl:attribute>    </xsl:template>    <xsl:template match="@valign">        <xsl:attribute name="class">            <xsl:value-of select="'vertical_align'"/>        </xsl:attribute>    </xsl:template>            	<!-- Remove <link> tags with obsolete rel attributes -->      <xsl:template match="html:link[@rel[contains(.,'top')] | @rel[contains(.,'up')] | @rel[contains(.,'first')] | @rel[contains(.,'last')] | @rel[contains(.,'slides')]]">    </xsl:template>	<!-- Removes empty <a>, <p> and <div> elements -->    <xsl:template match="html:a[.='' and not(node())] | html:p[.='' and not(node())] | html:div[.='' and not(node())] | html:title[.='' and not(node())]">      </xsl:template>                                                                                         <!-- Makes empty table cells valid with a space -->    <xsl:template match="html:td[.='' and not(node())]">        <xsl:element name="td">			<xsl:text> </xsl:text>		</xsl:element>    </xsl:template>     		  	<!-- Removes deprecated attributes of attrs having anything to do		with styling. Removes summary attr on tables – not neccessary 		as the docbook xslt adds the exact same summary text in <p> before the table -->	    <xsl:template match="@type | @shape | @clear | @width | @summary | @border | @span | @cellpadding | @cellspacing">    </xsl:template>				<!-- Replaces nested <p> tags with div. Nested <p>s are not valid. -->	<xsl:template match="html:p[//html:p]">		<xsl:element name="div">			<xsl:attribute name="class">	            <xsl:value-of select="'outer_paragraph'"/>	        </xsl:attribute>			<xsl:apply-templates select="node()|text()"/>		</xsl:element>	</xsl:template>	<!-- Removes <p>/<div> inside <th>, leaves the text -->	<xsl:template match="html:th/html:p | html:th/html:div">		<xsl:copy-of select="text()" />	</xsl:template>	    	</xsl:stylesheet>